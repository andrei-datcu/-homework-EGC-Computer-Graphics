README TEMA3 EGC

Nume: Datcu Andrei Daniel
Grupa: 331CC

1. Cerinta

Un joc de atletism

2. Utilizare

Arhiva contine o solutie MSVC 2012. Aplicatia poate fi rulata in modul debug.
Singura interactiune intre user si aplicatie se face prin intermediul tastelor

SPACE - Porneste jocul
SUS, STANGA, DREAPTA - miscarea jucatorului

Q - Activeaza camera TPS spate propriului jucator
A,Z - Activeaza camera TPS spate pentru ceilalti doi jucatori
E - Activeaza camera FPS a propriului jucator
S,X - Activeaza camera FPS a celoralalti 2 jucatori
W - Activeaza camera TPS de pe marginea pistei, conform enuntului
T - Activeaza camera FPS de deasupra stadionului
I,J,K,L - translateaza camera FPS de deasupra stadionului inainte/inapoi stanga dreapta
O, P - translateaza camera FPS de deasupra stadionului sus/jos
[,] - rotatie ox camera FPS de deasupra stadionului
;,' -rotatie oy camera FPS de deasupra stadionului
.,/ -rotatie oz camera FPS de deasupra stadionului 

NOTA:
 La mine pe calculator, pornirea dureaza ~1-1.2 minute (stadionul are undeva la 200k vertecsi)


3. Implementare

Platforma: Windows 7
IDE Folosit: Microsoft Visual Studio 2012 Ultimate v 11.0.50727.1 RTMREL
Compilator: MSVC 2012 (vezi IDE)

Dependente:
	FreeGlut
	GLEW
	Assimp - Pentru incarcarea de modele
	DevIL - Pentru incarcarea texturilor din imagini aflate pe disc (png, tga)

Tema are ca baza codul de la laboratorul 5-6

Modificarile aduse de mine acestui schelet sunt:
	- Am externalizat clasa MainWindow (corespunzatoare clasei Laborator)
	- Am separat implementarea de declararea lab_glut.hpp
	
	
TOATE formele desenate pe ecran sunt la baza Mesh. Mesh este o clasa ce inglobeaza
 un vao, un ibo si maxim 3 vbo-uri(pozitii, normale si coordonate in textura).
 O Mesha poate avea o singura textura/material. De aceea un obiect (Object3D)
 va fi practic o serie de Meshe. Un atlet (Athlete) este un Object3D care aduce in plus
 3 camere (TPS Spate, TPS Lateral si FPS, translatate si rotite corespunzator la fiecare miscare)
 
 Totodata, un atlet are viteza culoare (pentru generarea texturii steagurilor din final) precum
 si un Obiect3D - asociat camerei TPS Lateral si care este translatat o data cu camera si randat
 o data cu atletul.
 
 Un Object3D se poate construi doar dintr-o cale de fisier .obj. Acesta este incarcat cu assimp.
 Assimp se ocupa si de impartirea in mese, iar apoi pentru fiecare mesa assimp construiesc un Mesh.

+--Object3D----+Athlete

	Un Athelete se poate misca in doua moduri:
		
		apeland metoda moveForward(): miscare manuala, jucatorul se misca in fata dupa directia unghiului actual
		apeland metoda autoMove(): miscare automata : Daca este pe linie dreapta se translateaza in fata, altfel:
			Se calculeaza viteza unghiulara pentru ca, respectand viteza liniara sa se faca o rotatie de pi pana
			se va ajunge in punctul diametral opus al terenului.
	
4. Functionalitati:

    - citirea vitezelor din fisierul resurse/speeds.txt
	- Miscarea in fata + rotirea jucatorului de la tastatura (neaccelerata)
	- Miscarea automata a celorlalti 2 jucatori.
	- Jucatorii nu pot iesi de pe pista.
	- Camera FPS asociata fiecarui jucator
	- Camera TPS la marginea pistei care urmareste conform enuntului jucatorul controlat de la tastatura
	- Dupa 2 ture, 2 steaguri in textura tip sah in culorile castigatorului vor flutura. Animatia este realizata in vertex_shader, conform enuntului
	
	Bonusuri:
		- Scena realista
		- Stadion cu locuri si o tribuna acoperita
		- Atletii cu infatisare umana
		- Pozitia camerei TPS de la marginea terenului este marcata de o camera de filmat vintage :)
		
	OBSERVATIE:
	     Niciun obiect din cele folosite in tema nu-mi aparatin. Ele au fost descarcate de pe tf3dm.com si de pe turbosquid.com
5. Continutul arhivei:
		./Tema3
		|	|
		|	Object3D.cpp/h clasa Object3D
		|	|
		|	+Mesh.cpp/h clasa Mesh
		|	|
		|   +Athelete.cpp/h clasa Athlete
		|   |
		|   +MainWindow.cpp/h clasa MainWindows care controleaza practic jocul
		|   |
		|	+restul fisierelor din scheletul de laboraor
		|   |
		|   |
		|   +./dependente (folderul unde se gasesc .h .lib si .dll pentru fiecare dependenta)
		|	|	|
		|	|	+ assimp
		|   |   |
		|   |   + freeglut
		|   |   |
		|   |   + glew
		|   |   |
		|   |   + glm
		|   |   |
		|   |   + IL
		|	|
		|   +./shadere
		|   |   |
		|   |   + cele doua seturi de shadere (vertex si frag pentru scena, respectiv steaguri)
		|	|
		|   +./resurse
		|   |   |
		|   |   + toate modele si texturile
		|   |   |
		|   |   + speeds.txt (FISIERUL DE UNDE SE CITESC VITEZELE)
		|
		README